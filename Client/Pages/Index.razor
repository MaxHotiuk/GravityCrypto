@page "/"
@using GravityCrypto.Client.Functions
@using System.Text
@inject IJSRuntime JS

<h3>Functions Page</h3>

<div>
    <h4>Input String</h4>
    <input @bind="inputString" placeholder="Enter string here" />
    <button @onclick="UpdateExpression">Update Expression</button>
    <p>Current string:@statusExpression</p>
</div>

<div>
    <h4>Decode A1Z26</h4>
    <button @onclick="HandleA1Z26Encoding">Decode A1Z26</button>
</div>

<div>
    <h4>Decode Binary String</h4>
    <input @bind="binaryLength" type="number" placeholder="Enter binary byte length" />
    <button @onclick="HandleBinaryDecoding">Decode Binary</button>
</div>

<div>
    <h4>Decode Ceasar</h4>
    <input @bind="ceasarShift" type="number" placeholder="Enter shift">
    <button @onclick="HandleCeasarDecoding">Decode Ceasar</button>
</div>

<div>
    <h4>Decode Polybius</h4>
    <input @bind="polybiusSquare" placeholder="Enter Polybius square (leave empty for default)" />
    <button @onclick="HandlePolybiusDecoding">Decode Polybius</button>
</div>

<div>
    <h4>Shift By First Letter</h4>
    <input @bind="firstLetter" placeholder="Enter first letter" />
    <button @onclick="ShiftByFirstLetter">Shift</button>
</div>

<div>
    <h4>Reverse Alphabet</h4>
    <button @onclick="ReverseAlphabet">Reverse Alphabet</button>
</div>

<div>
    <h4>Vigenère Cipher</h4>
    <input @bind="vigenereKey" placeholder="Enter key" />
    <button @onclick="ApplyVigenereCipher">Apply Vigenère Cipher</button>
</div>

<div>
    <h4>Combined Operations</h4>
    <button @onclick="ApplyCombinedOperations">Apply Combined Operations</button>
</div>

<div>
    <h4>Undo</h4>
    <button @onclick="UndoHelper">Undo</button>
</div>
@code {
    private string inputString = "";
    private string statusExpression = "";
    private int binaryLength = 8;
    private string polybiusSquare = "";
    private string firstLetter = "";
    private string vigenereKey = "";
    private string ceasarShift = "";
    private Functions functions;
    public Index()
    {
        functions = new Functions(inputString);
    }

    private void UpdateExpression()
    {
        functions.NewExpression(inputString);
        inputString = "";
        statusExpression = functions.StringExpression;
    }

    private void UndoHelper()
    {
        functions.Revert();
        statusExpression = functions.StringExpression;
    }

    private void HandleBinaryDecoding()
    {
        try
        {
            statusExpression = functions.DecodeBinaryString(inputString, binaryLength);
        }
        catch (Exception ex)
        {
            statusExpression = $"Error: {ex.Message}";
        }
    }

    private void HandleCeasarDecoding()
    {
        try
        {
            functions.Shift(int.Parse(ceasarShift));
            statusExpression = functions.StringExpression;
        }
        catch (Exception ex)
        {
            statusExpression = $"Error: {ex.Message}";
        }
    }

    private void HandlePolybiusDecoding()
    {
        functions.DecodePolybiusInputHelper();
        statusExpression = functions.StringExpression;
    }

    private void ShiftByFirstLetter()
    {
        if (!string.IsNullOrEmpty(firstLetter))
        {
            try
            {
                functions.ShiftByFirstLetter();
                statusExpression = functions.StringExpression;
            }
            catch (Exception ex)
            {
                statusExpression = $"Error: {ex.Message}";
            }
        }
    }

    private void HandleA1Z26Encoding()
    {
        try
        {
            statusExpression = functions.ConvertA1Z26(functions.StringExpression);
        }
        catch (Exception ex)
        {
            statusExpression = $"Error: {ex.Message}";
        }
    }

    private void ReverseAlphabet()
    {
        functions.ReverseAlphabet();
        statusExpression = functions.StringExpression;
    }

    private void ApplyVigenereCipher()
    {
        functions.Vigenère(vigenereKey);
        statusExpression = functions.StringExpression;
    }

    private void ApplyCombinedOperations()
    {
        functions.Combined();
        statusExpression = functions.StringExpression;
    }
}